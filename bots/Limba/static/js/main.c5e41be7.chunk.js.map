{"version":3,"sources":["WebChat.js","MinimizableWebChat.js","App.js","index.js","backgroundUNA.JPG"],"names":["WebChat","className","onFetchToken","store","token","directLine","useMemo","createDirectLine","styleSet","createStyleSet","backgroundColor","botAvatarImage","botAvatarInitials","userAvatarImage","userAvatarInitials","useEffect","style","color","fontSize","MinimizableWebChat","createStore","dispatch","next","action","type","console","log","setTimeout","payload","name","value","language","window","navigator","Math","floor","random","$","append","hide","fadeIn","delay","fadeOut","displayAnimation","localStorage","getItem","activity","from","role","setNewMessage","useState","loaded","setLoaded","minimized","setMinimized","newMessage","side","setSide","setToken","handleFetchToken","useCallback","a","async","fetch","method","headers","Headers","res","json","setItem","handleMaximizeButtonClick","handleMinimizeButtonClick","handleSwitchButtonClick","onClick","classNames","styleOptions","App","alt","src","WebPageBackground","ReactDOM","render","document","getElementById","module","exports"],"mappings":"2dAyEeA,G,QApEC,SAAC,GAA+C,IAA7CC,EAA4C,EAA5CA,UAAWC,EAAiC,EAAjCA,aAAcC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,MAC3CC,EAAaC,mBAAQ,kBAAMC,2BAAiB,CAAEH,YAAU,CAACA,IAEzDI,EAAWF,mBACf,kBACEG,yBAAe,CACbC,gBAAiB,cASjBC,eAAgB,oNAChBC,kBAAmB,OACnBC,gBAAiB,uEACjBC,mBAAoB,WAExB,IAOF,OAJAC,qBAAU,WACRb,MACC,CAACA,IAEGE,EAoBH,kBAAC,IAAD,CACAH,UAAS,UAAKA,GAAa,GAAlB,aACTI,WAAYA,EACZF,MAAOA,EACPK,SAAUA,IAIZ,yBAAKP,UAAS,UAAKA,GAAa,GAAlB,qBACZ,yBAAKA,UAAU,WACb,yBAAKA,UAAU,QAEb,0BAAMA,UAAU,UAElB,uBAAGe,MAAO,CAACC,MAAM,QAASC,SAAS,SAAnC,iD,oCCkJOC,MAzMY,WACzB,IAAMhB,EAAQG,mBACZ,kBACEc,sBAAY,IAAI,gBAAGC,EAAH,EAAGA,SAAH,OAAkB,SAAAC,GAAI,OAAI,SAAAC,GA+CxC,MA9CoB,kCAAhBA,EAAOC,MACTC,QAAQC,IAAI,iCACdC,YAAW,WACTN,EAAS,CACPG,KAAM,sBACNI,QAAS,CACPC,KAAM,eACNC,MAAO,CACLC,SAAUC,OAAOC,UAAUF,eAKhC,KAiJV,WAGCN,QAAQC,IAAI,oBACEQ,KAAKC,MAAoB,EAAdD,KAAKE,UAG1BC,IAAE,0BACGC,OAAOD,IAAE,8oBAsBSE,OAAOC,OAAO,MAErCH,IAAE,mBAAmBI,MAAM,KAAOC,QAAQ,KA/KxCC,GAEwC,SAApCC,aAAaC,QAAQ,aACrBpB,QAAQC,IAAIM,OAAOC,UAAUF,SAAW,wBAClCJ,YAAW,WACnBN,EAAS,CACPG,KAAM,sBACNI,QAAS,CACPC,KAAM,uBACNC,MAAO,CACLC,SAAUC,OAAOC,UAAUF,eAIhC,OAEuB,kCAAhBR,EAAOC,MAAgF,UAApCoB,aAAaC,QAAQ,WAChFxB,EAAS,CACPG,KAAM,sBACNI,QAAS,CACPC,KAAM,uBACNC,MAAO,CACLC,SAAUC,OAAOC,UAAUF,aAIT,kCAAhBR,EAAOC,MAC2B,QAAtCD,EAAOK,QAAQkB,SAASC,KAAKC,MAC/BC,GAAc,GAGX3B,EAAKC,UAEhB,IAmBIf,EAAWF,mBACf,kBACEG,yBAAe,CACbC,gBAAiB,kBAErB,IA5E6B,EA+EHwC,oBAAS,GA/EN,mBA+ExBC,EA/EwB,KA+EhBC,EA/EgB,OAgFGF,oBAAS,GAhFZ,mBAgFxBG,EAhFwB,KAgFbC,EAhFa,OAiFKJ,oBAAS,GAjFd,mBAiFxBK,EAjFwB,KAiFZN,EAjFY,OAkFPC,mBAAS,SAlFF,mBAkFxBM,EAlFwB,KAkFlBC,EAlFkB,OAmFLP,qBAnFK,mBAmFxB9C,EAnFwB,KAmFjBsD,EAnFiB,KAwFzBC,EAAmBC,uBAAY,8BAAAC,EAAAC,OAAA,mDAC9B1D,EAD8B,mCAAAyD,EAAA,MAGfE,MAAM,kEAAmE,CACzFC,OAAQ,OACRC,QAAS,IAAIC,QAAQ,CACnB,cAAiB,iEACjB,eAAgB,0CAPa,cAG3BC,EAH2B,kBAAAN,EAAA,MAUTM,EAAIC,QAVK,gBAUzBhE,EAVyB,EAUzBA,MAGRqB,QAAQC,IAAIyC,GACZvB,aAAayB,QAAQ,QAAQjE,GAC7BwC,aAAayB,QAAQ,WAAU,GAC/BX,EAAStD,GAhBwB,wCAkBlC,CAACsD,EAAUtD,IAERkE,EAA4BV,uBAAY,oBAAAC,EAAAC,OAAA,gDAC5CV,GAAU,GACVE,GAAa,GACbL,GAAc,GAH8B,uCAI3C,CAACK,EAAcL,IAEZsB,EAA4BX,uBAAY,WAC5CN,GAAa,GACbL,GAAc,KACb,CAACK,EAAcL,IAEZuB,EAA0BZ,uBAAY,WAC1CH,EAAiB,SAATD,EAAkB,QAAU,UACnC,CAACC,EAASD,IACqBI,uBAAa,WAC7CX,GAAc,MAQhB,OACE,yBAAKhD,UAAU,wBACZoD,GACC,4BAAQpD,UAAU,WAAWwE,QAASH,GACnCf,GAAc,0BAAMtD,UAAU,+CAGlCkD,GACC,yBAAKlD,UAAWyE,IAAoB,SAATlB,EAAkB,gBAAkB,iBAAkBH,EAAY,OAAS,KACpG,gCACE,yBAAKpD,UAAU,WACf,4BAAQA,UAAU,SAASwE,QAASD,GAClC,0BAAMvE,UAAU,6BAElB,4BAAQA,UAAU,WAAWwE,QAASF,GACpC,0BAAMtE,UAAU,sCAGpB,kBAAC,EAAD,CACEA,UAAU,iBACVC,aAAcyD,EACdxD,MAAOA,EACPK,SAAUA,EACVJ,MAAOA,EACPuE,aApGW,Q,kBCnDRC,G,QAPH,kBACV,yBAAK3E,UAAU,OACb,yBAAK4E,IAAI,qBAAqBC,IAAKC,MACjC,kBAAC,EAAD,SCNNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U,gFCLjDC,EAAOC,QAAU,IAA0B,2C","file":"static/js/main.c5e41be7.chunk.js","sourcesContent":["import React, { useEffect, useMemo } from 'react';\nimport ReactWebChat, { createDirectLine, createStyleSet } from 'botframework-webchat';\n\nimport './WebChat.css';\n\nconst WebChat = ({ className, onFetchToken, store, token }) => {\n  const directLine = useMemo(() => createDirectLine({ token }), [token]);\n\n  const styleSet = useMemo(\n    () =>\n      createStyleSet({\n        backgroundColor: 'Transparent',\n        //bubbleBackground: '#222',\n        //bubbleBorder: 'solid 1px #444',\n        //bubbleBorderRadius: 20,\n        //bubbleFromUserBackground: '#0ABADE',\n        //bubbleFromUserBorder: 'solid 1px #444',\n        //bubbleFromUserBorderRadius: 20,\n        //bubbleFromUserTextColor: 'White',\n        //bubbleTextColor: 'White',      \n        botAvatarImage: 'https://previews.123rf.com/images/kahovsky/kahovsky1711/kahovsky171100063/89471041-lindo-sonriendo-chat-bot-trabajando-en-auriculares-con-micr%C3%B3fono-detr%C3%A1s-de-la-computadora-port%C3%A1til-vector-d.jpg',\n        botAvatarInitials: 'Limb',\n        userAvatarImage: 'https://cdn3.iconfinder.com/data/icons/vector-icons-6/96/256-512.png',\n        userAvatarInitials: 'User'\n      }),\n    []\n  );\n\n  useEffect(() => {\n    onFetchToken();\n  }, [onFetchToken]);\n\n  return token ? (\n\n    // <>\n    //   <div class=\"content\">\n    //     <div class=\"row message\">\n    //       <div class=\"css-ostbv8 bubble\">\n    //         <div class=\"markdown css-o3xlyv\">\n    //           <p>\n    //             {/* <img src=\"https://gpbot.azureedge.net/botimas/webchat/img/00-Ilustracion-Zury-IMAS.jpg\" className=\"animation-image\"/> */}\n    //             <span className=\"avat2\" />\n    //           </p>\n    //         </div>\n    //         <div class=\"filler\"></div>\n    //       </div>\n    //       <div class=\"row\">\n    //         <span class=\"css-1phiexw\"></span>\n    //         <div class=\"filler\"></div>\n    //       </div>\n    //     </div>\n    //   </div>\n      <ReactWebChat \n      className={`${className || ''} web-chat`} \n      directLine={directLine} \n      store={store} \n      styleSet={styleSet} \n      />\n    //</>\n  ) : (\n    <div className={`${className || ''} connect-spinner`}>\n      <div className=\"content\">\n        <div className=\"icon\">\n          {/* <span className=\"ms-Icon ms-Icon--Robot\" /> */}\n          <span className=\"avat\" />\n        </div>\n        <p style={{color:'black', fontSize:'25px'}}>Por favor espere mientras nos conectamos.</p>\n        {/* <p>Please wait while we are connecting.</p> */}\n      </div>\n    </div>\n  );\n};\n\nexport default WebChat;\n","import classNames from 'classnames';\nimport React, { useCallback, useMemo, useState } from 'react';\nimport { createStore, createStyleSet } from 'botframework-webchat';\n\nimport WebChat from './WebChat';\n\nimport './fabric-icons-inline.css';\nimport './MinimizableWebChat.css';\nimport $ from \"jquery\"\n\n\nconst MinimizableWebChat = () => {\n  const store = useMemo(\n    () =>\n      createStore({}, ({ dispatch }) => next => action => {\n        if (action.type === 'DIRECT_LINE/CONNECT_FULFILLED') {\n          console.log('DIRECT_LINE/CONNECT_FULFILLED');\n        setTimeout(() => {\n          dispatch({\n            type: 'WEB_CHAT/SEND_EVENT',\n            payload: {\n              name: 'webchat/join',\n              value: {\n                language: window.navigator.language\n              },\n              \n            }\n          });\n        }, 1000);\n\n        displayAnimation();\n\n        if (localStorage.getItem('welcome') === 'true'){\n            console.log(window.navigator.language + ' WEB_CHAT/SEND_EVENT');\n                  setTimeout(() => {\n          dispatch({\n            type: 'WEB_CHAT/SEND_EVENT',\n            payload: {\n              name: 'requestWelcomeDialog',\n              value: {\n                language: window.navigator.language\n              }\n            }\n          });\n        }, 1000);\n        }\n        } else if(action.type === 'DIRECT_LINE/CONNECT_FULFILLED' && localStorage.getItem(\"welcome\") === \"false\"){\n          dispatch({\n            type: 'WEB_CHAT/SEND_EVENT',\n            payload: {\n              name: 'requestWelcomeDialog',\n              value: {\n                language: window.navigator.language\n              }\n            }\n          });\n        }else if (action.type === 'DIRECT_LINE/INCOMING_ACTIVITY') {\n          if (action.payload.activity.from.role === 'bot') {\n            setNewMessage(true);\n          }\n        }\n        return next(action);\n      }),\n    []\n  );\n\n  const styleOptions = {\n   /* bubbleBackground: '#222',\n  bubbleBorder: 'solid 1px #444',\n  bubbleBorderRadius: 20,\n  bubbleFromUserBackground: '#222',\n  bubbleFromUserBorder: 'solid 1px #444',\n  bubbleFromUserBorderRadius: 20,\n  bubbleFromUserTextColor: 'White',\n  bubbleTextColor: 'White',\n    botAvatarImage:\n      './avatar.png',\n    botAvatarInitials: 'BF',\n    userAvatarImage: 'https://docs.microsoft.com/en-us/azure/bot-service/v4sdk/media/logo_bot.svg?view=azure-bot-service-4.0',\n    userAvatarInitials: 'WC'*/\n  };\n\n  const styleSet = useMemo(\n    () =>\n      createStyleSet({\n        backgroundColor: 'Transparent'\n      }),\n    []\n  );\n\n  const [loaded, setLoaded] = useState(false);\n  const [minimized, setMinimized] = useState(true);\n  const [newMessage, setNewMessage] = useState(false);\n  const [side, setSide] = useState('right');\n  const [token, setToken] = useState();\n\n  // To learn about reconnecting to a conversation, see the following documentation:\n  // https://docs.microsoft.com/en-us/azure/bot-service/rest-api/bot-framework-rest-direct-line-3-0-reconnect-to-conversation?view=azure-bot-service-4.0\n\n  const handleFetchToken = useCallback(async () => {\n    if (!token) {\n      \n      const res = await fetch('https://directline.botframework.com/v3/directline/conversations', { \n        method: 'POST',\n        headers: new Headers({\n          'Authorization': 'Bearer ' + '80jrGNhI9RU.oE1Tr1sFjw5PatTgWxp_HlQuTtaQnMRWFJe8uqAm1pc', //Limb bot prueba\n          'Content-Type': '\"Content-Type\", \"application/json\"'\n        })\n      });\n      const { token } = await res.json();\n\n      \n      console.log(res)\n      localStorage.setItem(\"token\",token);\n      localStorage.setItem(\"welcome\",false);\n      setToken(token);\n    }\n  }, [setToken, token]);\n\n  const handleMaximizeButtonClick = useCallback(async () => {\n    setLoaded(true);\n    setMinimized(false);\n    setNewMessage(false);\n  }, [setMinimized, setNewMessage]);\n\n  const handleMinimizeButtonClick = useCallback(() => {\n    setMinimized(true);\n    setNewMessage(false);\n  }, [setMinimized, setNewMessage]);\n\n  const handleSwitchButtonClick = useCallback(() => {\n    setSide(side === 'left' ? 'right' : 'left');\n  }, [setSide, side]);\n  const handleLanguageButtonClick = useCallback (()=>{\n    setNewMessage(true)\n  })\n\n  // TODO: [P2] Currently, we cannot unmount Web Chat from DOM when it is minimized.\n  //       Today, if we unmount it, Web Chat will call disconnect on DirectLineJS object.\n  //       When minimized, we still want to maintain that connection while the UI is gone.\n  //       This is related to https://github.com/microsoft/BotFramework-WebChat/issues/2750.\n\n  return (\n    <div className=\"minimizable-web-chat\">\n      {minimized && (\n        <button className=\"maximize\" onClick={handleMaximizeButtonClick}>\n          {newMessage && <span className=\"ms-Icon ms-Icon--CircleShapeSolid red-dot\" />}\n        </button>\n      )}\n      {loaded && (\n        <div className={classNames(side === 'left' ? 'chat-box left' : 'chat-box right', minimized ? 'hide' : '')}>\n          <header>\n            <div className=\"filler\" />\n            <button className=\"switch\" onClick={handleSwitchButtonClick}>\n              <span className=\"ms-Icon ms-Icon--Switch\" />\n            </button>\n            <button className=\"minimize\" onClick={handleMinimizeButtonClick}>\n              <span className=\"ms-Icon ms-Icon--ChromeMinimize\" />\n            </button>\n          </header>\n          <WebChat\n            className=\"react-web-chat\"\n            onFetchToken={handleFetchToken}\n            store={store}\n            styleSet={styleSet}\n            token={token}\n            styleOptions = {styleOptions}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n function displayAnimation(){\n\n\n  console.log('displayAnimation');\n  var imgName = Math.floor(Math.random()*4) + 1;\n  var ROOT_FOLDER = 'https://gpbot.azureedge.net/ict/webchat/'\n  // setTimeout(function(){\n      $('.css-ljhy6a.css-7c9av6')\n          .append($('<li id=\"animation-item\" class=\"css-1qyo5rb\">'\n                      + '<div class=\"css-hgucfj css-1wi3416\">'    //1\n                          + '<div class=\"css-7xorrq avatar\"></div>' \n                          + '<div class=\"content\">' //2\n                              + '<div class=\"row message\">' //3\n                                  + '<div class=\"css-ostbv8 bubble\">' //4\n                                      + '<div class=\"markdown css-o3xlyv\"><p>' //5\n                                      + '<img src=\"https://previews.123rf.com/images/kahovsky/kahovsky1711/kahovsky171100063/89471041-lindo-sonriendo-chat-bot-trabajando-en-auriculares-con-micr%C3%B3fono-detr%C3%A1s-de-la-computadora-port%C3%A1til-vector-d.jpg\" class=\"animation-image\" />'\n                                      //+ '<img src=\"' + ROOT_FOLDER + 'img/anim/' + imgName + '.png\" class=\"animation-image\" />'\n                                      + '</p></div>' //5\n                                  + '</div>' //4\n                                  + '<div class=\"filler\"></div>' \n                              + '</div>' //3\n                              + '<div class=\"row\">' \n                                  + '<span class=\"css-1phiexw\">'\n                                  // + 'Just now'\n                                  + '</span>' \n                                  + '<div class=\"filler\"></div>' \n                              + '</div>' \n                          + '</div>' //2\n                          + '<div class=\"filler\"></div>' \n                      + '</div>' //1\n                  + '</li>').hide().fadeIn(2000));\n\n      $('#animation-item').delay(10000).fadeOut(2000);\n  // }, 1000);\n}\n\nfunction generateUserId(){\n  return /*\"dl_\" +*/ Date.now().toString() + (Math.floor(Math.random() * 1000000) + 1).toString();\n}\nexport default MinimizableWebChat;\n","import React from 'react';\n\nimport MinimizableWebChat from './MinimizableWebChat';\nimport WebPageBackground from './backgroundUNA.JPG';\nimport './App.css';\n\n\n\nconst App = () => (\n  <div className=\"App\">\n    <img alt=\"product background\" src={WebPageBackground}/>\n    { <MinimizableWebChat /> }\n  </div>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n","module.exports = __webpack_public_path__ + \"static/media/backgroundUNA.bc594eef.JPG\";"],"sourceRoot":""}